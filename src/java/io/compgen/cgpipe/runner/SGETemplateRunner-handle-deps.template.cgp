#!${job.shell}
#$ -w e
#$ -terse
#$ -N ${job.name}
<% if job.hold %>
#$ -h
<% endif %>
<% if job.env %>
#$ -V
<% endif %>
<% if job.walltime %>
#$ -l h_rt=${job.walltime}
<% endif %>
<% 
job.procs ?= 1
if job.procs > 1 && job.sge.parallelenv %>
#$ -pe ${job.sge.parallelenv} ${job.procs}
<% endif %>
<% if job.stack %>
#$ -l h_stack=${job.stack}
<% endif %>
<% if job.mem %>
#$ -l h_vmem=${job.mem}
<% endif %>
<% if job.sge.depids %>
#$ -hold_jid ${job.sge.depids}
<% endif %>
<% if job.project %>
#$ -P ${job.project}
<% endif %>
<% if job.priority %>
#$ -p ${job.priority}
<% endif %>
<% if job.queue %>
#$ -q ${job.queue}
<% endif %>
<% if job.mail %>
<% job.mailtype ?= "ae" %>
#$ -M ${job.mail}
#$ -m ${job.mailtype}
<% endif %>
<% if job.wd %>
#$ -wd ${job.wd}
<% endif %>
<% if job.account %>
#$ -A ${job.account}
<% endif %>
<% if job.stdout %>
#$ -o ${job.stdout}
<% endif %>
<% if job.stderr %>
#$ -e ${job.stderr}
<% endif %>
<% for custom in job.custom %>
<% if custom %>
#$ ${custom}
<% endif %>
<% done %>
#$ -notify
FAILED=""
notify_stop() {
kill_deps_signal "SIGSTOP"
}
notify_kill() {
kill_deps_signal "SIGKILL"
}

kill_deps_signal() {
  FAILED="1"
  kill_deps
}

kill_deps() {
  DEPS="$(qstat -f -j $JOB_ID | grep jid_successor_list | awk '{print $2}' | sed -e 's/,/ /g')"
  if [ "$DEPS" != "" ]; then
    qdel $DEPS
  fi
}

trap notify_stop SIGUSR1
trap notify_kill SIGUSR2
    
set -o pipefail


<% for line in job.setup %>
<% if line %>
${line}
<% endif %>
<% done %>


${job._body}
RETVAL=$?

if [ "$FAILED" == "" ]; then
  if [ $RETVAL -ne 0 ]; then
    kill_deps

<% 
if !job.keepfailed
    for jobout in job._outputs 
        if jobout[0] != "."
%>
    if [ -e "${jobout}" ]; then 
        rm "${jobout}"
    fi
<% 
        endif 
    done
endif
%>
  fi
  exit $RETVAL
else
  # wait for SGE to kill the job for accounting purposes (max 60 sec)
  I=0
  while [ $I -lt 60 ]; do
    sleep 1
    let \"I=$I+1\"
  done
fi
